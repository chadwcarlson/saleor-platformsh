name: 'saleor'

# Edited in two different places for runtime/service versions to be in projects.json. No bueno.
type: 'python:3.8'

variables:
    env: 
        USE_DEMO_DATA: true

relationships:
    database: "dbb:postgresql"
    rediscache: "cacheredis:redis"

hooks:
    build: |
        set -e

        VERSIONS_FILE=upstreams/versions.json

        ls -a $PLATFORM_CACHE_DIR

        # Get Poetry.
        POETRY_VERSION=$(cat $VERSIONS_FILE | jq -r '.poetry.version')
        echo -e "\nDownloading Poetry (\033[1m$POETRY_VERSION\033[0m)\n"
        curl -s https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py >> get-poetry.py
        python get-poetry.py --version $POETRY_VERSION
        rm get-poetry.py

        # Configure Poetry.   
        . $PLATFORM_APP_DIR/.poetry/env
        echo "export PATH=\"$HOME/.poetry/bin:$PATH\"" >> .global/environment
        echo "export POETRY_VIRTUALENVS_PATH=$HOME/.virtualenvs" >> .global/environment
        export PATH="$HOME/.poetry/bin:$PATH"
        export PIP_USER=false
        poetry config virtualenvs.path $HOME/.virtualenvs

        # Get Saleor.
        SALEOR_VERSION=$(cat $VERSIONS_FILE | jq -r '.saleor.version')
        echo -e "\nDownloading Saleor backend (\033[1m$SALEOR_VERSION\033[0m)\n"
        wget --quiet -c https://github.com/mirumee/saleor/archive/refs/tags/$SALEOR_VERSION.tar.gz -O - | tar -xz
        mv saleor-$SALEOR_VERSION saleor

        # Configure Saleor
        export SECRET_KEY=$PLATFORM_PROJECT_ENTROPY

        # Install dependencies.
        cd ~/$PLATFORM_APPLICATION_NAME
        poetry install --no-dev

        # Download and setup Node, NPM, and NVM.
        NVM_VERSION=$(cat $VERSIONS_FILE | jq -r '.nvm.version')
        echo -e "\nDownloading NVM (\033[1m$VERSION\033[0m)\n"
        node --version
        NODE_VERSION=$(cat .nvmrc)
        echo $NODE_VERSION
        unset NPM_CONFIG_PREFIX
        export NVM_DIR="$PLATFORM_APP_DIR/.nvm"
        if [ ! -d "$NVM_DIR/" ]; then
            # install.sh will automatically install NodeJS based on the presence of $NODE_VERSION
            curl -f -o- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash
        fi
        ls -a $NVM_DIR
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        node --version 

# hooks:
#     build: !include
#         type: string
#         path: scripts/_build.sh
# #     deploy: !include
#         type: string
#         path: scripts/_deploy.sh

web:
    upstream:
        socket_family: unix
    commands:
        start: "cd ~/$PLATFORM_APPLICATION_NAME && poetry run gunicorn --bind unix:$SOCKET --workers 4 --worker-class uvicorn.workers.UvicornWorker saleor.asgi:application"
    locations:
        "/":
            passthru: true
        "/static":
            expires: 1h
            allow: true

# The size of the persistent disk of the application (in MB).
disk: 1024

# Set a local R/W mount for logs
mounts:
    'saleor/media':
        source: local
        source_path: 'saleor/media'
    '/.demo':
        source: local
        source_path: '.demo'

source:
    operations:
        upstream_update: 
            command: ./upstreams/update.sh $UPSTREAM
        update_dependencies:
            command: |
                set -e
                cd saleor && poetry update

# crons:
#     update_saleor:
#         cmd: |
#             UPDATE_BRANCH=$(cat upstreams/versions.json | jq -r '.branch')
#             if [ "$PLATFORM_BRANCH" = $UPDATE_BRANCH ]; then
#                 platform environment:sync code data --no-wait --yes
#                 platform source-operation:run upstream_update --variable env:UPSTREAM=saleor --no-wait --yes
#             fi
#     update_minimal_variant_prices:
#         spec: '0 3 * * *'
#         cmd: 'poetry run python ~/$PLATFORM_APPLICATION_NAME/manage.py update_all_products_minimal_variant_prices'
#     update_exchange_rates:
#         spec: '30 3 * * *'
#         cmd: 'poetry run python ~/$PLATFORM_APPLICATION_NAME/manage.py update_exchange_rates --all'
