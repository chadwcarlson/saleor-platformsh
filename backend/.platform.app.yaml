name: 'saleor'

type: 'python:3.8'

relationships:
    database: "db:postgresql"
    rediscache: "cacheredis:redis"

hooks:
    build: |
        set -e 

        # Get Poetry.
        ./upstreams/poetry.sh

        # Configure Poetry.   
        . $PLATFORM_APP_DIR/.poetry/env
        echo "export PATH=\"$HOME/.poetry/bin:$PATH\"" >> .global/environment
        echo "export POETRY_VIRTUALENVS_PATH=$HOME/.virtualenvs" >> .global/environment
        export PATH="$HOME/.poetry/bin:$PATH"
        export PIP_USER=false
        poetry config virtualenvs.path $HOME/.virtualenvs

        # Get Saleor.
        ./upstreams/saleor.sh

        # Install dependencies.
        cd ~/$PLATFORM_APPLICATION_NAME && poetry install -v --no-dev

        # Collect static assets for Saleor.
        # SECRET_KEY=$PLATFORM_PROJECT_ENTROPY poetry run ~/manage.py collectstatic --no-input

    deploy: |
        cd ~/$PLATFORM_APPLICATION_NAME
        
        # Apply database migrations.
        poetry run python ~/$PLATFORM_APPLICATION_NAME/manage.py migrate

        # Populate database with demo data. (Initial admin user created: admin@example.com/admin)
        poetry run python ~/$PLATFORM_APPLICATION_NAME/manage.py populatedb --createsuperuser

web:
    upstream:
        socket_family: unix
    commands:
        start: "cd ~/$PLATFORM_APPLICATION_NAME && poetry run gunicorn --bind unix:$SOCKET --workers 4 --worker-class uvicorn.workers.UvicornWorker saleor.asgi:application"
    locations:
        "/":
            passthru: true
            # root: saleor
        "/static":
            # root: "saleor/static"
            expires: 1h
            allow: true

# The size of the persistent disk of the application (in MB).
disk: 1024

# Set a local R/W mount for logs
mounts:
    'saleor/media':
        source: local
        source_path: saleor/media

source:
    operations:
        upstream_update: 
            command: ./upstream/update.sh $UPSTREAM
        update_dependencies:
            command: |
                set -e
                cd saleor && poetry update

# crons:
#     update_saleor:
#         cmd: |
#             UPDATE_BRANCH=$(cat upstreams/versions.json | jq -r '.branch')
#             if [ "$PLATFORM_BRANCH" = $UPDATE_BRANCH ]; then
#                 platform environment:sync code data --no-wait --yes
#                 platform source-operation:run upstream_update --variable env:UPSTREAM=saleor --no-wait --yes
#             fi
#     update_minimal_variant_prices:
#         spec: '0 3 * * *'
#         cmd: '.poetry/bin/poetry run python ~/manage.py update_all_products_minimal_variant_prices'
#     update_exchange_rates:
#         spec: '30 3 * * *'
#         cmd: '.poetry/bin/poetry run python ~/manage.py update_exchange_rates --all'
